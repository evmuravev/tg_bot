from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Update,
)
from telegram.ext import (
    ContextTypes,
)
from db.repositories.date_responses import DateResponseRepository
from db.repositories.profiles import ProfilesRepository
from db.repositories.users import UsersRepository
from db.tasks import get_repository

from handlers.common.users import get_user
from handlers.show_profile import show_profile
from models.date_response import DateResponseCreate
from models.profile import ProfileStatus
from models.user import UserPublic, UserUpdate


async def date_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user: UserPublic = await get_user(update, context)
    if user and user.is_banned:
        await context.bot.answer_callback_query(
            callback_query_id=update.callback_query.id,
            show_alert=True,
            text='–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–≤–µ—Ä—à–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è!',
        )
        return

    if not user or not user.profile or not user.profile.status == ProfileStatus.completed:
        await context.bot.answer_callback_query(
            callback_query_id=update.callback_query.id,
            show_alert=True,
            text='–í—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å!\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è',
        )
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–ø—É—Å—Ç–æ–π username
    if not update.effective_user.username:
        await context.bot.answer_callback_query(
            callback_query_id=update.callback_query.id,
            show_alert=True,
            text='–£ –≤–∞—Å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω @username (–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)!',
        )
        return
    else:
        # –û–±–Ω–æ–≤–∏—Ç—å username –ø—Ä–∏ –µ–≥–æ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ —Å –±–∞–∑–æ–π
        if update.effective_user.username != user.username:
            user_repo = get_repository(UsersRepository, context)
            user = await user_repo.update_username(
                user=UserUpdate(**update.effective_user._get_attrs())
            )
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∫–ª–∏–∫–∞
        profile_repo: ProfilesRepository = get_repository(ProfilesRepository, context)
        date_response_repo: DateResponseRepository = get_repository(DateResponseRepository, context)

        inviter = await profile_repo.get_profile_by_user_id(
            user_id=int(update.callback_query.data.split(':')[1])
        )
        responder = await profile_repo.get_profile_by_user_id(
            user_id=update.effective_user.id
        )

        date_response = await date_response_repo.get_date_responses_by_responder(
            responder=responder.id,
            message_id=str(update.effective_message.id)
        )
        if date_response:
            await context.bot.answer_callback_query(
                callback_query_id=update.callback_query.id,
                show_alert=True,
                text='–í–∞—à –æ—Ç–∫–ª–∏–∫ —É–∂–µ –±—ã–ª –¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞! ü§û',
            )
        else:
            image, caption = await show_profile(user, context)
            options = [
                [
                    InlineKeyboardButton("‚ú® –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ!", url=f'https://t.me/{update.effective_user.username}'),
                    InlineKeyboardButton("–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è üòí", callback_data=f'profile_complain:{str(responder.id)}'),
                ]
            ]
            keyboard = [*options]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await context.bot.send_photo(
                chat_id=inviter.user_id,
                photo=image.file_id,
                caption='–ù–æ–≤—ã–π –æ—Ç–∫–ª–∏–∫\! ' + caption +'\n\n _–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É!\n\
...–ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–ø–æ–º–Ω–∏—Ç—å, –Ω–∞ –∫–∞–∫–æ–µ —Å–≤–∏–¥–∞–Ω–∏–µ –≤—ã –ø—Ä–∏–≥–ª–∞—à–∞–ª–∏..._üòâ',
                parse_mode="MarkdownV2",
                reply_markup=reply_markup
            )

            # –ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –æ—Ç–∫–ª–∏–∫–∞
            date_response_create = DateResponseCreate(
                inviter=inviter.id,
                responder=responder.id,
                message_id=str(update.effective_message.id)
            )
            await date_response_repo.create_date_response(date_response_create=date_response_create)

            await context.bot.answer_callback_query(
                callback_query_id=update.callback_query.id,
                show_alert=True,
                text='–í–∞—à –æ—Ç–∫–ª–∏–∫ —Å –≤–∞—à–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!üíå\n–¢–µ–ø–µ—Ä—å –æ–Ω –º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–ø–∏—Å–∞—Ç—åü§û',
            )
